@page "/clients"

@using Services
@using DTOs.Client
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject IServiceScopeFactory serviceScopeFactory

@inject IServiceScopeFactory serviceScopeFactory
@inject NavigationManager NavigationManager

<div class="container-fluid">
  <div class="d-flex justify-content-between m-5">
    <h1>Clients</h1>

    <NavLink class="btn-lg btn-success p-3" href="@link" Match="NavLinkMatch.All">
      Add new client
    </NavLink>
  </div>

  <div>
    @if (_clients is not null && _clients.Count > 0)
    {
      <table class="table table-bordered table-hover">
        <thead class="thead-dark">
          <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Surname</th>
            <th scope="col">Patronymic</th>
            <th scope="col">Birthday</th>
            <th scope="col">Gender</th>
            <th scope="col">Edit</th>
            <th scope="col">Delete</th>
          </tr>
        </thead>

        <tbody>
          @foreach (var client in _clients)
          {
            <tr class="pointerCursor">
              <th scope="row" @onclick="@(() => DisplayClientInfo(client.ID))">@client.IdentificationNumber</th>
              <td @onclick="@(() => DisplayClientInfo(client.ID))">@client.Name</td>
              <td @onclick="@(() => DisplayClientInfo(client.ID))">@client.Surname</td>
              <td @onclick="@(() => DisplayClientInfo(client.ID))">@client.Patronymic</td>
              <td @onclick="@(() => DisplayClientInfo(client.ID))">@client.Birthday.ToShortDateString()</td>
              <td @onclick="@(() => DisplayClientInfo(client.ID))">@client.Gender</td>
              <td @onclick="@(() => EditClient(client.ID))" class="bg-warning"><span class="fa fa-user-edit" /></td>
              <td @onclick="@(() => DeleteClient(client.ID))" class="bg-danger"><span class="fa fa-user-slash" /></td>
            </tr>
          }
        </tbody>
      </table>
    }
    else if (_clients is null)
    {
      <div class="d-flex justify-content-center m-5">
        <div class="spinner-border" role="status">
          <span class="sr-only">Loading...</span>
        </div>
      </div>
    }
    else
    {
      <blockquote class="blockquote m-5">
        <p class="mb-0">There are no clients here.</p>
        <footer class="blockquote-footer"><cite>Add first</cite></footer>
      </blockquote>
    }
  </div>

  <div class="toast alert alert-danger m-5" style="position: absolute; bottom: 0; right: 0;" data-delay="3500">
    <div class="toast-header">
      <strong class="mr-auto">Error!</strong>
      <small>@(DateTime.Now.ToShortTimeString())</small>
    </div>
    <div class="toast-body">
      @Result.Message
    </div>
  </div>
</div>

@code
{
  private List<ClientDto> _clients;
  private string link = $"/client/edit";
  private DTOs.ResultDto Result = new DTOs.ResultDto { Success = true };

  protected override async Task OnInitializedAsync()
  {
    await RefreshClientsTable();
    await base.OnInitializedAsync();
  }

  private async Task RefreshClientsTable()
  {
    using var scope = serviceScopeFactory.CreateScope();
    var clientsService = scope.ServiceProvider.GetService<ClientsService>();
    _clients = (await clientsService.GetClientsAsync()).ToList();
  }

  private void DisplayClientInfo(Guid clientID)
  {
    NavigationManager.NavigateTo($"/client/{clientID}");
  }

  private void EditClient(Guid clientID)
  {
    NavigationManager.NavigateTo($"/client/edit/{clientID}");
  }

  private async Task DeleteClient(Guid clientID)
  {
    using var scope = serviceScopeFactory.CreateScope();
    var clientsService = scope.ServiceProvider.GetService<ClientsService>();
    Result = await clientsService.DeleteClient(clientID);

    if (Result.Success)
    {
      var client = _clients.First(client => client.ID == clientID);
      _clients.Remove(client);
    }
    else
    {
      await JSRuntime.InvokeVoidAsync("ShowToast", ".toast");
    }
  }
}
