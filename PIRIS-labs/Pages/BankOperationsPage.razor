@page "/bank-operations"

@using Services
@using DTOs.Common
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject IServiceScopeFactory serviceScopeFactory

@inject NavigationManager NavigationManager

<div class="container-fluid">
  <h1 class="m-5">Bank Operations</h1>

  <div>
    @if (_bankAccounts is not null && _bankAccounts.Count > 0)
    {
      <table class="table table-bordered table-hover mb-5">
        <thead class="thead-dark">
          <tr>
            <th scope="col">Number</th>
            <th scope="col">Name</th>
            <th scope="col">Debit</th>
            <th scope="col">Credit</th>
            <th scope="col">Balance</th>
          </tr>
        </thead>

        <tbody>
          @foreach (var account in _bankAccounts)
          {
            <tr>
              <th scope="row">@account.Number</th>
              <td>@account.AccountPlanName</td>
              <td>@account.DebitValue</td>
              <td>@account.CreditValue</td>
              <td>@account.Balance</td>
            </tr>
          }
        </tbody>
      </table>

      <button class="btn btn-primary btn-lg p-3" @onclick="@(() => CloseBankDay())" @onclick:preventDefault>
        @if (Spinner)
        {
          <span class="spinner-border spinner-border-sm p-2 mr-2" role="status" aria-hidden="true" />
        }
        Close Bank Day
      </button>

      if (!Result.Success)
      {
        <div class="alert alert-danger" role="alert">
          @Result.Message
        </div>
      }
    }
    else if (_bankAccounts is null)
    {
      <div class="d-flex justify-content-center m-5">
        <div class="spinner-border" role="status">
          <span class="sr-only">Loading...</span>
        </div>
      </div>
    }
    else
    {
      <blockquote class="blockquote m-5">
        <p class="mb-0">There are no bank's accounts in your bank...</p>
        <footer class="blockquote-footer"><cite>I recommend you to add them.</cite></footer>
      </blockquote>
    }
  </div>

  <div class="toast m-5" style="position: absolute; bottom: 0; right: 0;" data-delay="3500">
    <div class="toast-header">
      <strong class="mr-auto">Day closed</strong>
      <small>@(DateTime.Now.ToShortTimeString())</small>
    </div>
    <div class="toast-body">
      Bank day closed successfully.
    </div>
  </div>
</div>

@code
{
  private IReadOnlyList<AccountDto> _bankAccounts = null;
  private bool Spinner = false;
  private DTOs.ResultDto Result = new DTOs.ResultDto { Success = true };

  protected override async Task OnInitializedAsync()
  {
    await RefreshTable();
    await base.OnInitializedAsync();
  }

  private async Task RefreshTable()
  {
    using var scope = serviceScopeFactory.CreateScope();
    var accountsService = scope.ServiceProvider.GetService<AccountsService>();

    _bankAccounts = await accountsService.GetBankAccountsAsync();
  }

  private async Task CloseBankDay()
  {
    using var scope = serviceScopeFactory.CreateScope();
    var bankOperationsService = scope.ServiceProvider.GetService<BankOperationsService>();

    await JSRuntime.InvokeVoidAsync("ShowToast", ".toast");

    //Result = await bankOperationsService.CloseDayAsync();

    if (Result.Success)
    {
      await RefreshTable();
    }
  }
}
