@page "/deposits"

@using Services
@using DTOs.Deposit
@using Microsoft.Extensions.DependencyInjection

@inject IServiceScopeFactory serviceScopeFactory

@inject NavigationManager NavigationManager

<div class="container-fluid">
  <div class="d-flex justify-content-between m-5">
    <h1>Deposit Plans</h1>
    <NavLink class="btn-lg btn-success p-3" href="@linkDepositPlanEdit" Match="NavLinkMatch.All">
      Add new plan
    </NavLink>
  </div>

  <div>
    @if (_depositPlans is not null && _depositPlans.Count > 0)
    {
      <table class="table table-bordered table-hover">
        <thead class="thead-dark">
          <tr>
            <th scope="col">Name</th>
            <th scope="col">Time, days</th>
            <th scope="col">Percent a year, %</th>
            <th scope="col">Revocable</th>
          </tr>
        </thead>

        <tbody>
          @foreach (var depositPlan in _depositPlans)
          {
            <tr>
              <th scope="row">@depositPlan.Name</th>
              <td>@depositPlan.DayPeriod</td>
              <td>@depositPlan.Percent</td>
              <td>
                @if (@depositPlan.Revocable)
                {<div>Yes</div>}
                else
                {<div>No</div>}
              </td>
            </tr>
          }
        </tbody>
      </table>
    }
    else if (_depositPlans is null)
    {
      <div class="d-flex justify-content-center m-5">
        <div class="spinner-border" role="status">
          <span class="sr-only">Loading...</span>
        </div>
      </div>
    }
    else
    {
      <blockquote class="blockquote m-5">
        <p class="mb-0">There are no deposit plans here.</p>
        <footer class="blockquote-footer"><cite>Add first</cite></footer>
      </blockquote>
    }
  </div>

  <div class="d-flex justify-content-between m-5">
    <h1>Deposits</h1>
    <NavLink class="btn-lg btn-success p-3" href="@linkDepositEdit" Match="NavLinkMatch.All">
      Add new deposit
    </NavLink>
  </div>

  <div>
    @if (_deposits is not null && _deposits.Count > 0)
    {
      <table class="table table-bordered table-hover mb-5">
        <thead class="thead-dark">
          <tr>
            <th scope="col">Deposit Plan</th>
            <th scope="col">Client</th>
            <th scope="col">End Date</th>
            <th scope="col">Amount</th>
            <th scope="col">Accumulated Amount</th>
            <th scope="col">Close Deposit</th>
          </tr>
        </thead>

        <tbody>
          @foreach (var deposit in _deposits)
          {
          <tr class="@(deposit.Closed ? "alert alert-secondary" : String.Empty)">
            <th scope="row">@deposit.DepositPlan</th>
            <td>@deposit.Client</td>
            <td>@deposit.EndDate.ToShortDateString()</td>
            <td>@deposit.Amount</td>
            <td>@deposit.AccumulatedAmount</td>
            @if (!deposit.Closed && deposit.Revocable)
            {
              <td class="pointerCursor alert alert-danger" @onclick="@(() => CloseDeposit(deposit))" @onclick:preventDefault><span class="fa fa-window-close"/></td>
            }
            else
            {
              <td>—</td>
            }
          </tr>
          }
        </tbody>
      </table>
    }
    else if (_deposits is null)
    {
      <div class="d-flex justify-content-center m-5">
        <div class="spinner-border" role="status">
          <span class="sr-only">Loading...</span>
        </div>
      </div>
    }
    else
    {
      <blockquote class="blockquote m-5">
        <p class="mb-0">There are no deposit plans here.</p>
        <footer class="blockquote-footer"><cite>Add first</cite></footer>
      </blockquote>
    }
  </div>
</div>

@code
{
  private List<DepositDto> _deposits;
  private IReadOnlyList<DepositPlanDto> _depositPlans;
  private string linkDepositEdit = $"/deposit/edit";
  private string linkDepositPlanEdit = $"/deposit-plan/edit";

  protected override async Task OnInitializedAsync()
  {
    await RefreshDepositsTables();
    await base.OnInitializedAsync();
  }

  private async Task RefreshDepositsTables()
  {
    using var scope = serviceScopeFactory.CreateScope();
    var depositsService = scope.ServiceProvider.GetService<DepositsService>();
    var depositPlansService = scope.ServiceProvider.GetService<DepositPlansService>();

    _depositPlans = await depositPlansService.GetDepositPlansAsync();
    _deposits = await depositsService.GetDepositsAsync();
  }

  private async Task CloseDeposit(DepositDto deposit)
  {
    using var scope = serviceScopeFactory.CreateScope();
    var depositsService = scope.ServiceProvider.GetService<DepositsService>();
    var result = await depositsService.CloseDepositAsync(deposit.ID);

    if (result.Success)
    {
      deposit.Closed = true;
    }
  }
}